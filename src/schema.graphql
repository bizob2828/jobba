scalar Date
scalar JSON
scalar JSONObject

type Query {
	"Returns a static `true` value while Jobba is running."
	healthcheck: Boolean

	"""
	Get all registered job ids.
	This is a legacy endpoint. Realistically you should use `tasks` instead."
	"""
	taskIds: [String]

	"Get all registered tasks."
	tasks: [Task]

	"Get a single task."
	task(taskId: String!): Task

	"Returns the number of jobs currently in the queue, waiting, or delayed for a given task."
	count(taskId: String!): Int

	"Get a list of jobs for a given task."
	jobs(
		taskId: String!
		options: JobsOptions
	): [Job]

	"Get a list of jobs matching a given type."
	jobsByType(
		status: Status!
		taskId: String
	): [Job]

	"Get a specific job."
	job(
		taskId: String!
		jobId: String!
	): Job
}

type Mutation {
	"""
	Schedules a new job in the job queue.

	@proxy [`Bull.Queue#add`](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queueadd)
	"""
	schedule(
		taskId: String!

		"Arbitrary job-specific params may be passed and used in the process method of jobs."
		params: JSONObject

		"Options to pass through to Bull's queue creation"
		options: ScheduleOptions
	): Job

	"""
	Pauses a task.

	@proxy [`Bull.Queue#pause`](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queuepause)

	A paused task will not process new jobs until resumed,
	but current jobs being processed will continue until they are finalized.
	"""
	pause(taskId: String!): Task

	"""
	Resumes a paused task.

	@proxy [`Bull.Queue#resume`](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queueresume)
	"""
	resume(taskId: String!): Task

	"""
	Empties a task, deleting all of the input lists and associated jobs.

	@proxy [`Bull.Queue#empty`](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queueempty)
	"""
	empty(taskId: String!): Task

	"""
	Closes the underlying redis client.

	@proxy [`Bull.Queue#close`](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queueclose)

	Use this to perform a graceful shutdown.

	Close can be called from anywhere, with one caveat:
	if called from within a job handler the queue won't close until after the job has been processed.
	See referenced proxy method for details and workarounds.
	"""
	close(taskId: String!): Task
}

"""
One of Jobba's core types.
Tasks are what you schedule when you want to run a job, now or in the future.

@proxy [`Bull.Queue`](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queue)
"""
type Task {
	"Unique id of the task."
	id: String!

	"Human readable name."
	name: String!

	"Human friendly description."
	description: String
}

"""
One of Jobba's core types.
A Job gets created every time a scheduled Task runs.
It contains status, progress, logs, and details of the run.

@proxy [`Bull.Job`](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#job)
"""
type Job {
	id: String!
	taskId: String!
	params: JSONObject
	data: JobData
	status: Status

	"Task that spawned the job."
	task: Task!

	"Extra data optionally added where relevant (ex: the jobsByType endpoint)."
	extra: ExtraJobData
}

type ExtraJobData {
	"Scheduled repeat option."
	cron: String

	"Next scheduled run of the job."
	next: String
}

type JobData {
	name: String
	params: JSONObject
	state: JSONObject
	logs: [Log]
	history: [JSONObject]
}

"Container for things logged by jobs."
type Log {
	level: LogLevel
	time: Date

	"Array of arbitrary values that were logged."
	values: [JSON]
}

enum LogLevel {
	debug
	error
	info
	log
	warn
}

enum Status {
	active
	completed
	delayed
	failed
	paused
	waiting
}

enum Sort {
	ascending
	descending
}

input JobsOptions {
	statuses: [Status]
	begin: Int
	end: Int

	"""
	The sorting direction of the results.

	Defaults to ascending.
	"""
	sort: Sort

	"""
	Limit the number of results.

	> Note: The limit is done via the server with a simple naive `Array#slice`.
	"""
	limit: Int

	"An arbitrary object to filter jobs with using `_.filter`."
	filter: JSONObject
}

"@ref [Bull.JobOpts](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queueadd)"
input ScheduleOptions {
	"""
	Optional priority value.

	Ranges from 1 (highest priority) to MAX_INT (lowest priority).

	Note that using priorities has a slight impact on performance, so do not use it if not required.
	"""
	priority: Int

	"""
	An amount of miliseconds to wait until this job can be processed.

	Note that for accurate delays, both server and clients should have their clocks synchronized.
	"""
	delay: Int

	"The total number of attempts to try the job until it completes."
	attempts: Int

	"Repeat job according to a cron specification."
	repeat: RepeatOptions

	"Backoff setting for automatic retries if the job fails"
	backoff: BackoffOptions

	"If true, adds the job to the right of the queue instead of the left (default false)."
	lifo: Boolean

	"The number of milliseconds after which the job should be fail with a timeout error."
	timeout: Int

	"""
	Override the job ID.

	By default, the job ID is a unique integer, but you can use this setting to override it.
	If you use this option, it is up to you to ensure the jobId is unique.
	If you attempt to add a job with an id that already exists, it will not be added.
	"""
	jobId: String

	"""
	If true, removes the job when it successfully completes.

	@accepts `Boolean` | `Number`

	A number specified the amount of jobs to keep.
	Default behavior is to keep the job in the completed set.
	"""
	removeOnComplete: JSON

	"""
	If true, removes the job when it fails after all attempts.

	@accepts `Boolean` | `Number`

	A number specified the amount of jobs to keep
	Default behavior is to keep the job in the failed set.
	"""
	removeOnFail: JSON

	"Limits the amount of stack trace lines that will be recorded in the stacktrace."
	stackTrackLimit: Int
}

"@ref [Bull.RepeatOpts](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queueadd)"
input RepeatOptions {
	"""
	Cron string for repeating runs.

	Mutually exclusive with `every` setting.
	"""
	cron: String

	"Timezone."
	tz: String

	"""
	Start date when the repeat job should start repeating (only valid with cron).

	@accepts Date | String | Int
	"""
	startDate: JSON

	"""
	End date when the repeat job should stop repeating.

	@accepts Date | String | Int
	"""
	endDate: JSON

	"Number of times the job should repeat at max."
	limit: Int

	"""
	Repeat every number of specified milliseconds.

	Mutually exclusive with `cron` setting.
	"""
	every: Int

	"The start value for the repeat iteration count."
	count: Int
}

"@ref [Bull.BackoffOpts](https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queueadd)"
input BackoffOptions {
	"Backoff type, which can be either `fixed` or `exponential`. A custom backoff strategy can also be specified in `backoffStrategies` on the queue settings."
	type: String

	"Backoff delay, in milliseconds."
	delay: Int!
}
