scalar Date
scalar JSON
scalar JSONObject

type Task {
	"Unique id of the task."
	id: String!

	"Human readable name."
	name: String!

	"Human friendly description."
	description: String
}

type Job {
	id: String!
	taskId: String!
	params: JSONObject
	data: JobData
	status: Status
}

type JobData {
	name: String
	params: JSONObject
	state: JSONObject
	logs: [Log]
	history: [JSONObject]
}

type Log {
	level: LogLevel
	time: Date
	values: [JSON]
}

enum LogLevel {
	debug
	error
	info
	log
	warn
}

enum Status {
	active
	completed
	delayed
	failed
	paused
	waiting
}

enum Sort {
	ascending
	descending
}

input JobsInput {
	statuses: [Status]
	begin: Int
	end: Int
	sort: Sort
	limit: Int
	filter: JSONObject
}

type Query {
	"Returns a static `true` value while Jobba is running."
	healthcheck: Boolean

	"""
	Get all registered job ids.
	This is a legacy endpoint. Realistically you should use `tasks` instead."
	"""
	taskIds: [String]

	"Get all registered tasks."
	tasks: [Task]

	"Get a single task."
	task(taskId: String!): Task

	"Returns the number of jobs currently in the queue, waiting, or delayed for a given task."
	count(taskId: String!): Int

	"Get a list of jobs for a given task."
	jobs(
		taskId: String!
		input: JobsInput
	): [Job]

	"Get a specific job."
	job(
		taskId: String!
		jobId: String!
	): Job
}
